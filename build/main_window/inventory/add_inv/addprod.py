
# This file was generated by the Tkinter Designer by Parth Jadhav
# https://github.com/ParthJadhav/Tkinter-Designer


from pathlib import Path

# from tkinter import *
# Explicit imports to satisfy Flake8
from tkinter import Frame, StringVar, Tk, Canvas, Entry, Text, Button, PhotoImage, messagebox

import controller as db_controller


OUTPUT_PATH = Path(__file__).parent
ASSETS_PATH = OUTPUT_PATH / Path(r"./assets")


def relative_to_assets(path: str) -> Path:
    return ASSETS_PATH / Path(path)


def add_Inventory():
    addInventory()


class addInventory(Frame):
    def __init__(self, parent, controller=None, *args, **kwargs):
        Frame.__init__(self, parent, *args, **kwargs)
        self.parent = parent
        self.selected_rid = None 

        self.data = {"p_name": StringVar(),"descp": StringVar(),"qty": StringVar(),"cost": StringVar(),"measure": StringVar()}


        canvas = Canvas(
            self,
            bg = "#FFFFFF",
            height = 589,
            width = 1100,
            bd = 0,
            highlightthickness = 0,
            relief = "ridge"
        )

        canvas.place(x = 0, y = 0)
        canvas.create_rectangle(
            0.0,
            0.0,
            1100.0,
            589.0,
            fill="#D9D9D9",
            outline="")

        self.button_image_1 = PhotoImage(
            file=relative_to_assets("button_1.png"))
        button_1 = Button(
            self,
            image=self.button_image_1,
            borderwidth=0,
            highlightthickness=0,
            command=self.save,
            relief="flat"
        )
        button_1.place(
            x=467.0,
            y=493.0,
            width=166.3023681640625,
            height=42.0
        )

        self.button_image_4 = PhotoImage(
            file=relative_to_assets("button_4.png"))
        button_4 = Button(
            self,
            image=self.button_image_4,
            borderwidth=0,
            highlightthickness=0,
            command=lambda: self.parent.navigate("view"),
            relief="flat"
        )
        button_4.place(
            x=118.0,
            y=21.0,
            width=52.7611083984375,
            height=48.81919860839844
        )

        self.image_image_1 = PhotoImage(
            file=relative_to_assets("image_1.png"))
        image_1 = canvas.create_image(
            363.0,
            188.0,
            image=self.image_image_1
        )

        entry_image_1 = PhotoImage(
            file=relative_to_assets("entry_1.png"))
        entry_bg_1 = canvas.create_image(
            363.49999237060547,
            200.0,
            image=entry_image_1
        )
        entry_1 = Entry(
            self,
            textvariable=self.data["p_name"],
            bd=0,
            bg="#A8A1A1",
            fg="#000716",
            highlightthickness=0
        )
        entry_1.place(
            x=236.322265625,
            y=188.0,
            width=254.35545349121094,
            height=22.0
        )

        canvas.create_text(
            247.20361328125,
            190.0,
            anchor="nw",
            text="Jane Doe",
            fill="#000000",
            font=("Montserrat SemiBold", 17 * -1)
        )

        self.image_image_2 = PhotoImage(
            file=relative_to_assets("image_2.png"))
        image_2 = canvas.create_image(
            363.0,
            402.0,
            image=self.image_image_2
        )

        entry_image_2 = PhotoImage(
            file=relative_to_assets("entry_2.png"))
        entry_bg_2 = canvas.create_image(
            363.49999237060547,
            414.0,
            image=entry_image_2
        )
        entry_2 = Entry(
            self,
            textvariable=self.data["qty"],
            bd=0,
            bg="#A8A1A1",
            fg="#000716",
            highlightthickness=0
        )
        entry_2.place(
            x=236.322265625,
            y=402.0,
            width=254.35545349121094,
            height=22.0
        )

        canvas.create_text(
            247.20361328125,
            404.0,
            anchor="nw",
            text="Jane Doe",
            fill="#000000",
            font=("Montserrat SemiBold", 17 * -1)
        )

        self.image_image_3 = PhotoImage(
            file=relative_to_assets("image_3.png"))
        image_3 = canvas.create_image(
            363.0,
            295.0,
            image=self.image_image_3
        )

        entry_image_3 = PhotoImage(
            file=relative_to_assets("entry_3.png"))
        entry_bg_3 = canvas.create_image(
            363.49999237060547,
            307.0,
            image=entry_image_3
        )
        entry_3 = Entry(
            self,
            textvariable=self.data["descp"],
            bd=0,
            bg="#A8A1A1",
            fg="#000716",
            highlightthickness=0
        )
        entry_3.place(
            x=236.322265625,
            y=295.0,
            width=254.35545349121094,
            height=22.0
        )

        canvas.create_text(
            247.20361328125,
            297.0,
            anchor="nw",
            text="Jane Doe",
            fill="#000000",
            font=("Montserrat SemiBold", 17 * -1)
        )

        self.image_image_4 = PhotoImage(
            file=relative_to_assets("image_4.png"))
        image_4 = canvas.create_image(
            737.0,
            188.0,
            image=self.image_image_4
        )

        entry_image_4 = PhotoImage(
            file=relative_to_assets("entry_4.png"))
        entry_bg_4 = canvas.create_image(
            737.4999923706055,
            200.0,
            image=entry_image_4
        )
        entry_4 = Entry(
            self,
            textvariable=self.data["cost"],
            bd=0,
            bg="#A8A1A1",
            fg="#000716",
            highlightthickness=0
        )
        entry_4.place(
            x=610.322265625,
            y=188.0,
            width=254.35545349121094,
            height=22.0
        )

        canvas.create_text(
            621.20361328125,
            190.0,
            anchor="nw",
            text="Jane Doe",
            fill="#000000",
            font=("Montserrat SemiBold", 17 * -1)
        )

        self.image_image_5 = PhotoImage(
            file=relative_to_assets("image_5.png"))
        image_5 = canvas.create_image(
            737.0,
            297.0,
            image=self.image_image_5
        )

        entry_image_5 = PhotoImage(
            file=relative_to_assets("entry_5.png"))
        entry_bg_5 = canvas.create_image(
            737.4999923706055,
            309.0,
            image=entry_image_5
        )
        entry_5 = Entry(
            self,
            textvariable=self.data["measure"],
            bd=0,
            bg="#A8A1A1",
            fg="#000716",
            highlightthickness=0
        )
        entry_5.place(
            x=610.322265625,
            y=297.0,
            width=254.35545349121094,
            height=22.0
        )

        canvas.create_text(
            621.20361328125,
            299.0,
            anchor="nw",
            text="Jane Doe",
            fill="#000000",
            font=("Montserrat SemiBold", 17 * -1)
        )

        self.image_image_6 = PhotoImage(
            file=relative_to_assets("image_6.png"))
        image_6 = canvas.create_image(
            550.0,
            54.0,
            image=self.image_image_6
        )

        self.image_image_7 = PhotoImage(
            file=relative_to_assets("image_7.png"))
        image_7 = canvas.create_image(
            973.0,
            454.0,
            image=self.image_image_7
        )

    # Save the data to the database
    def save(self):
        # check if any fields are empty
        for val in self.data.values():
            if val.get() == "":
                messagebox.showinfo("Error", "Please fill in all the fields")
                return

        # Save the room
        result = db_controller.add_inventory(
            *[self.data[label].get() for label in ("p_name", "descp", "qty","cost","measure")]
        )

        if result:
            messagebox.showinfo("Success", "Ingredients added successfully")
            self.parent.navigate("view")
            self.parent.windows.get("view").handle_refresh()
            #self.handle_refresh()

            # clear all fields
            for label in self.data.keys():
                self.data[label].set('')
        else:
            messagebox.showerror(
                "Error", "Unable to ingredients. Please make sure the data is validated"
            )
      
  
