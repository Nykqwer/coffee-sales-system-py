
# This file was generated by the Tkinter Designer by Parth Jadhav
# https://github.com/ParthJadhav/Tkinter-Designer


from pathlib import Path

# from tkinter import *
# Explicit imports to satisfy Flake8
from tkinter import END, Frame, StringVar, Tk, Canvas, Entry, Text, Button, PhotoImage, messagebox
import controller as db_controller

OUTPUT_PATH = Path(__file__).parent
ASSETS_PATH = OUTPUT_PATH / Path(r"./assets")


def relative_to_assets(path: str) -> Path:
    return ASSETS_PATH / Path(path)



def menuPage():
    Menu()


class Menu(Frame):
    def __init__(self, parent, controller=None, *args, **kwargs):
        Frame.__init__(self, parent, *args, **kwargs)
        self.parent = parent
        self.data = {"name": StringVar(), "orders": StringVar(), "total_price": StringVar()}
        #self.geometry("1100x589")
        self.configure(bg = "#FFFFFF")
        self.button_clicked = False
     
        self.canvas = Canvas(
            self,
            bg = "#FFFFFF",
            height = 589,
            width = 1100,
            bd = 0,
            highlightthickness = 0,
            relief = "ridge"
        )

        self.canvas.place(x = 0, y = 0)
        self.canvas.create_rectangle(
            0.0,
            0.0,
            1100.0,
            589.0,
            fill="#D9D9D9",
            outline="")

        self.image_image_1 = PhotoImage(
            file=relative_to_assets("image_1.png"))
        image_1 = self.canvas.create_image(
            921.0,
            296.0,
            image=self.image_image_1
        )

 

        self.canvas.create_rectangle(
            737.342529296875,
            49.0,
            738.342529296875,
            540.0367431640625,
            fill="#FFFFFF",
            outline="")

        self.button_image_2 = PhotoImage(
            file=relative_to_assets("button_2.png"))
        button_2 = Button(
            self,
            image=self.button_image_2,
            borderwidth=0,
            highlightthickness=0,
            command=lambda: self.whichButtonClicked('btn3'),
            relief="flat"
        )
        button_2.place(
            x=521.948974609375,
            y=89.0,
            width=172.31329345703125,
            height=180.0
        )

        self.button_image_3 = PhotoImage(
            file=relative_to_assets("button_3.png"))
        button_3 = Button(
            self,
            image=self.button_image_3,
            borderwidth=0,
            highlightthickness=0,
            command=lambda:self.whichButtonClicked('btn6'),
            relief="flat"
        )
        button_3.place(
            x=521.948974609375,
            y=320.0,
            width=172.31329345703125,
            height=180.0
        )

  

        self.image_image_2 = PhotoImage(
            file=relative_to_assets("image_2.png"))
        image_2 = self.canvas.create_image(
            368.0,
            27.0,
            image=self.image_image_2
        )

        self.image_image_3 = PhotoImage(
            file=relative_to_assets("image_3.png"))
        image_3 = self.canvas.create_image(
            838.0,
            104.0,
            image=self.image_image_3
        )

        self.button_image_5 = PhotoImage(
            file=relative_to_assets("button_5.png"))
        button_5 = Button(
            self,
            image=self.button_image_5,
            borderwidth=0,
            highlightthickness=0,
            command=self.save,
            relief="flat"
        )
        button_5.place(
            x=839.5263671875,
            y=490.0,
            width=166.3023681640625,
            height=42.0
        )

        self.button_image_6 = PhotoImage(
            file=relative_to_assets("button_6.png"))
        button_6 = Button(
            self,
            image=self.button_image_6,
            borderwidth=0,
            highlightthickness=0,
            command=lambda: self.whichButtonClicked('btn4'),
            relief="flat"
        )
        button_6.place(
            x=41.07470703125,
            y=320.0,
            width=172.31329345703125,
            height=180.0
        )

        self.button_image_7 = PhotoImage(
            file=relative_to_assets("button_7.png"))
        button_7 = Button(
            self,
            image=self.button_image_7,
            borderwidth=0,
            highlightthickness=0,
            command=lambda:self.whichButtonClicked('btn5'),
            relief="flat"
        )
        button_7.place(
            x=281.51171875,
            y=320.0,
            width=172.31329345703125,
            height=180.0
        )

        self.canvas.create_rectangle(
            776.0,
            438.9999999528363,
            1057.0000147704686,
            441.0,
            fill="#FFFFFF",
            outline="")
        
     

        
        self.button_image_1 = PhotoImage(
            file=relative_to_assets("button_1.png"))
        button_1 = Button(
            self,
            image=self.button_image_1,
            borderwidth=0,
            highlightthickness=0,
            command=lambda:self.whichButtonClicked('btn2'),
            relief="flat"
        )
        button_1.place(
            x=281.51171875,
            y=89.0,
            width=172.31329345703125,
            height=180.0
        )

        self.button_image_4 = PhotoImage(
            file=relative_to_assets("button_4.png"))
        button_4 = Button(
            self,
            image=self.button_image_4,
            borderwidth=0,
            highlightthickness=0,
            command=lambda:self.whichButtonClicked('btn1'),
            relief="flat"
        )
        button_4.place(
            x=41.07470703125,
            y=89.0,
            width=172.31329345703125,
            height=180.0
        )

        self.entry_4 = Text(
            self,
            bd=0,
            bg="#E6E6E6",
            fg="#000716",
            highlightthickness=0
        )
        self.entry_4.place(
            x=384.0,
            y=333.0,
            width=0,
            height=0,
        )

        self.coffee_info = []
        self.which_btn = None
        self.text_objects = {}
        self.customer_name = 0
        
        
    def whichButtonClicked(self, name):  
        self.which_btn = name
        self.buttonClicked()

    def buttonClicked(self):
      
        
        # Mapping button identifiers to their respective coffee functions
        coffee_info_functions = {
            'btn2': self.hot_Cafe_latte,
            'btn1': self.hot_americano,
            'btn3': self.hot_caramel_latte,
            'btn4': self.hot_chocolate,
            'btn5': self.hot_coffee_Indocine,
            'btn6': self.white_chocolate_mocha,
        }

        if self.which_btn in coffee_info_functions:
            coffee_name, qty, price = coffee_info_functions[self.which_btn]()
            
            # Check if the coffee is already in the list
            found = False
            for item in self.coffee_info:
                if item[0] == coffee_name:
                    # Increment quantity and price
                    item[1] += qty
                    item[2] += price
                    found = True
                    break

            if not found:
                # Add new entry to coffee_info
                self.coffee_info.append([coffee_name, qty, price])

            self.display_coffee_info()
        else:
            print('error')


    def display_coffee_info(self):
        x_positions = [778.0, 948.0, 1033.0]
        y_position = 166.0  # Starting y-position

        total_price = 0
        ordered_data = ''

        for i, item in enumerate(self.coffee_info):
            coffee_name = item[0]
            qty_text = f"x{item[1]}"
            price_text = f"₱{item[2]}"
            total_price += item[2]
            ordered_data += f"{coffee_name}: {qty_text}, {price_text}, "

            # Check if the text objects already exist
            if coffee_name in self.text_objects:
                # Update existing text objects with new values
                self.canvas.itemconfigure(self.text_objects[coffee_name]['qty'], text=qty_text)
                self.canvas.itemconfigure(self.text_objects[coffee_name]['price'], text=price_text)
            else:
                # Create new text objects and store references
                name_text = self.canvas.create_text(
                    x_positions[0],
                    y_position,
                    anchor="nw",
                    text=coffee_name,
                    fill="#FFFFFF",
                    font=("BreeSerif Regular", 14 * -1)
                )

                qty_text_obj = self.canvas.create_text(
                    x_positions[1],
                    y_position,
                    anchor="nw",
                    text=qty_text,
                    fill="#FFFFFF",
                    font=("BreeSerif Regular", 14 * -1)
                )

                price_text_obj = self.canvas.create_text(
                    x_positions[2],
                    y_position,
                    anchor="nw",
                    text=price_text,
                    fill="#FFFFFF",
                    font=("BreeSerif Regular", 14 * -1)
                )

                # Store references to text objects
                self.text_objects[coffee_name] = {'name': name_text, 'qty': qty_text_obj, 'price': price_text_obj}

            # Increment y-position for the next item
            y_position += 36

        self.entry_4.delete(1.0, END)  # Clear previous content
        self.entry_4.insert(END, ordered_data)

        # Create or update the total price text object
        self.total_price_text = f"₱{total_price}"
        if 'total_price' in self.text_objects:
            self.canvas.itemconfigure(self.text_objects['total_price'], text=self.total_price_text)
        else:
            total_price_obj = self.canvas.create_text(
                1019.0,
                420.0,
                anchor="nw",
                text=self.total_price_text,
                fill="#FFFFFF",
                font=("BreeSerif Regular", 14 * -1)
            )
            self.text_objects['total_price'] = total_price_obj

        # Include total price in the data as an integer
        self.data["total_price"].set(total_price)

    def save(self):
        self.customer_name += 1

        # Format the customer name with the incremented value
        formatted_customer_name = f"C {self.customer_name}"
        
        # Set the formatted customer name to the corresponding entry
        self.data['name'].set(formatted_customer_name)

        # Get the text content from the Text widget
        order_value = self.entry_4.get("1.0", END)  # Corrected get() call
        self.data["orders"].set(order_value)
        
        # Check if any fields are empty
        for val in self.data.values():
            if val.get() == "":
                messagebox.showinfo("Error", "Please fill in all the fields")
                return

        # Save the room
        result = db_controller.add_order(
            *[self.data[label].get() for label in ("name", "orders", "total_price")]
        )

        if result:
            messagebox.showinfo("Success", "Activity added successfully")
            self.clear_displayed_data()
        else:
            messagebox.showerror(
                "Error", "Unable to add activity. Please make sure the data is validated"
            )



    def clear_displayed_data(self):
        # Remove text objects from the canvas
        for coffee_name, text_object in self.text_objects.items():
            # Ensure that text_object is a dictionary
            if isinstance(text_object, dict):
                self.canvas.delete(text_object['name'])
                self.canvas.delete(text_object['qty'])
                self.canvas.delete(text_object['price'])

         # Remove total price text object if it exists
        if 'total_price' in self.text_objects:
            total_price_obj = self.text_objects['total_price']
            self.canvas.delete(total_price_obj)     
                
        
        # Clear text object references
        self.text_objects = {}

        # Clear coffee info list
        self.coffee_info = []

         

   
        

    def hot_Cafe_latte(self):
        coffee_name = 'Hot Cafe Latte'
        qty = 1
        price = 140

        return coffee_name, qty, price

    def hot_americano(self):
        coffee_name = 'Hot Americano'
        qty = 1
        price = 145

        return coffee_name, qty, price
    
    def hot_caramel_latte(self):
        coffee_name = 'Hot Caramel Latte'
        qty = 1
        price = 140

        return coffee_name, qty, price
    
    def hot_chocolate(self):
        coffee_name = 'Hot Chocolate'
        qty = 1
        price = 150

        return coffee_name, qty, price
    
    def hot_coffee_Indocine(self):
        coffee_name = 'Hot Coffee Indocine'
        qty = 1
        price = 150

        return coffee_name, qty, price
    
    def white_chocolate_mocha(self):
        coffee_name = 'W Chocolate Mocha'
        qty = 1
        price = 150

        return coffee_name, qty, price
    
