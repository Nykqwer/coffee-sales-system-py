
# This file was generated by the Tkinter Designer by Parth Jadhav
# https://github.com/ParthJadhav/Tkinter-Designer


from pathlib import Path

# from tkinter import *
# Explicit imports to satisfy Flake8
from tkinter import Frame, Tk, Canvas, Entry, Text, Button, PhotoImage, messagebox
from tkinter.ttk import Style, Treeview
import controller as db_controller


OUTPUT_PATH = Path(__file__).parent
ASSETS_PATH = OUTPUT_PATH / Path(r"./assets")


def relative_to_assets(path: str) -> Path:
    return ASSETS_PATH / Path(path)




def viewOrder():
    ViewOrder()


class ViewOrder(Frame):
    def __init__(self, parent, controller=None, *args, **kwargs):
        Frame.__init__(self, parent, *args, **kwargs)
        self.parent = parent
        self.selected_rid = None 

        self.configure(bg = "#FFFFFF")

        canvas = Canvas(
            self,
            bg = "#FFFFFF",
            height = 589,
            width = 1100,
            bd = 0,
            highlightthickness = 0,
            relief = "ridge"
        )

        canvas.place(x = 0, y = 0)
        canvas.create_rectangle(
            0.0,
            0.0,
            1100.0,
            589.0,
            fill="#D9D9D9",
            outline="")

        self.image_image_1 = PhotoImage(
            file=relative_to_assets("image_1.png"))
        image_1 = canvas.create_image(
            550.0,
            43.0,
            image=self.image_image_1
        )

        canvas.create_rectangle(
            118.0,
            80.0,
            982.0,
            504.0,
            fill="#A8A1A1",
            outline="")

        self.button_image_1 = PhotoImage(
            file=relative_to_assets("button_1.png"))
        self.confirm_btn = Button(
            self,
            image=self.button_image_1,
            borderwidth=0,
            highlightthickness=0,
            command=self.handle_confirm,
            relief="flat"
        )
        self.confirm_btn.place(
            x=460.0,
            y=518.0,
            width=166.3023681640625,
            height=42.0
        )

        self.button_image_2 = PhotoImage(
            file=relative_to_assets("button_2.png"))
        self.delete_btn = Button(
            self,
            image=self.button_image_2,
            borderwidth=0,
            highlightthickness=0,
            command=self.handle_delete,
            relief="flat"
        )
        self.delete_btn.place(
            x=816.0,
            y=518.0,
            width=166.3023681640625,
            height=42.0
        )

        self.button_image_3 = PhotoImage(
            file=relative_to_assets("button_3.png"))
        self.edit_btn = Button(
            self,
            image=self.button_image_3,
            borderwidth=0,
            highlightthickness=0,
            command=self.handle_edit,
            relief="flat"
        )
        self.edit_btn.place(
            x=638.0,
            y=518.0,
            width=166.3000030517578,
            height=42.0
        )

        self.button_image_4 = PhotoImage(
            file=relative_to_assets("button_4.png"))
        button_4 = Button(
            self,
            image=self.button_image_4,
            borderwidth=0,
            highlightthickness=0,
            command=lambda:self.handle_refresh(),
            relief="flat"
        )
        button_4.place(
            x=929.0,
            y=27.0,
            width=52.7611083984375,
            height=48.81919860839844
        )
        
        
    

        self.columns = {
            "id": ["No.", 5],
            "name": ["Customer No.", 5],
            "order": ["Order", 380],
            "total": ["Total Price", 40],
   
        }
        
                # Create a style
        self.style = Style(self)
        self.style.configure("Custom.Treeview", background="#FFFFFF")
        self.style.map("Custom.Treeview",
                       background=[("selected", "#A9A2A2")])

        self.treeview = Treeview(
            self,
            columns=list(self.columns.keys()),
            show="headings",
            height=200,
            selectmode="browse",
            style="Custom.Treeview"
            # bg="#FFFFFF",
            # fg="#5E95FF",
            # font=("Montserrat Bold", 18 * -1)
        )

        for idx, txt in self.columns.items():
            self.treeview.heading(idx, text=txt[0],anchor='center')
            self.treeview.column(idx, width=txt[1],anchor='center')

        self.treeview.place(x=118.0, y=80.0, width=864, height=424)
        #self.treeview.place(x=40.0, y=101.0, width=700.0, height=229.0)

        # Insert data
        self.handle_refresh()

         # Add selection event
        self.treeview.bind("<<TreeviewSelect>>", self.on_treeview_select)
        
        
        
        self.auto_refresh_interval = 2000
        self.auto_refresh()

    def filter_treeview_records(self, query):
        self.treeview.delete(*self.treeview.get_children())
        # Run for loop from original data
        for row in self.order_data:
            # Check if query exists in any value from data
            if query.lower() in str(row).lower():
                # Insert the data into the treeview
                self.treeview.insert("", "end", values=row)
        self.on_treeview_select()

    def on_treeview_select(self, event=None):
        try:
            self.treeview.selection()[0]
        except IndexError:
            self.parent.selected_rid = None
            return
        # Get the selected item
        item = self.treeview.selection()[0]
        # Get the room id
        self.parent.selected_rid = self.treeview.item(item, "values")[0]
        # Enable the buttons
        self.confirm_btn.config(state="normal")
        self.delete_btn.config(state="normal")
        self.edit_btn.config(state="normal")

    def handle_refresh(self):
        self.treeview.delete(*self.treeview.get_children())
        self.order_data = db_controller.get_orders()
        for row in self.order_data:
            self.treeview.insert("", "end", values=row)

     #def handle_navigate_back(self):
        #self.parent.navigate("add")

    def handle_delete(self):
        if db_controller.delete_order(self.parent.selected_rid):
            messagebox.showinfo("Success","Successfully Deleted the order")
        else:
            messagebox.showerror("failed","Unable to delete order")

        self.handle_refresh()

    def handle_confirm(self):
        if db_controller.delete_order(self.parent.selected_rid):
            messagebox.showinfo("Success","Successfully Served the order")
        else:
            messagebox.showerror("failed","Error")

        self.handle_refresh()

    def handle_edit(self):
        self.parent.navigate("edit")
        self.parent.windows["edit"].initialize()
        self.handle_refresh()
        
    
    
    def auto_refresh(self):
        self.handle_refresh()
        self.after(self.auto_refresh_interval, self.auto_refresh)
    

    
     
